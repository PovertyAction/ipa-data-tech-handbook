[
  {
    "objectID": "methods/references.html#causal-inference",
    "href": "methods/references.html#causal-inference",
    "title": "Analytical and Computational Methods References",
    "section": "Causal Inference",
    "text": "Causal Inference\n\nThe Effect, by Nick Huntington-Klein\nCausal Inference: The Mixtape, by Scott Cunningham",
    "crumbs": [
      "Methods",
      "References"
    ]
  },
  {
    "objectID": "methods/references.html#causal-machine-learning",
    "href": "methods/references.html#causal-machine-learning",
    "title": "Analytical and Computational Methods References",
    "section": "Causal Machine Learning",
    "text": "Causal Machine Learning\n\nEconML\nGeneralized Random Forests\nCausal Machine Learning Book, by Victor Chernozhukov, Christian Hansen, Nathan Kallus, Martin Spindler, Vasilis Syrgkanis",
    "crumbs": [
      "Methods",
      "References"
    ]
  },
  {
    "objectID": "methods/references.html#generative-ai-large-language-models",
    "href": "methods/references.html#generative-ai-large-language-models",
    "title": "Analytical and Computational Methods References",
    "section": "Generative AI & Large Language Models",
    "text": "Generative AI & Large Language Models\n\nLarge Language Model Course, by Maxime Labonne\nPractical Deep Learning\nGenerative AI for Beginners\nApplied LLMs - Read “What We’ve Learned From A Year of Building with LLMs”\nGenerative AI Handbook, by William Brown\nPrompt Engineering Guide, by DAIR AI\n\nAnthropic Guide to Prompt Engineering\nOpenAI’s Guide to Prompt Engineering",
    "crumbs": [
      "Methods",
      "References"
    ]
  },
  {
    "objectID": "contributing.html#how-to-use-the-handbook",
    "href": "contributing.html#how-to-use-the-handbook",
    "title": "Contributing to the Handbook",
    "section": "How to use the Handbook",
    "text": "How to use the Handbook\nThis handbook serves as shared repository for common tools, methods, and examples of how IPA develops and implements solutions for data analysis and software development.\nWe use this handbook to document ways in which we work together on developing code. As such, this should be a living document that tracks best practices and advice for the ways in which we work more effectively, learn together, and find joy in our work.\nDocumentation can seem like a tedious requirement. However, when there is documentation it helps to reduce the need to start afresh every time something needs to be done. Moreover, documentation provides a reference point for people to go to before they need to pursue information via email, chat, or other modes of communication.\nMost guidelines in this handbook are intended as reference points. They are not absolute rules. Every person and team will have their own preferences and ways of working. The guide is meant to provide reference points for how we work today if someone has suggestions for improving our work processes, we should approach those suggestions with an open mind and willingness to understand the perspectives of our colleagues.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#reading-the-handbook",
    "href": "contributing.html#reading-the-handbook",
    "title": "Contributing to the Handbook",
    "section": "Reading the Handbook",
    "text": "Reading the Handbook\nThe best ways to read the handbook are the following:\n\nNavigate to https://povertyaction.github.io/ipa-data-tech-handbook/docs\nRead the source code on GitHub.\nRead it locally on your computer by cloning the GitHub repository",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#editing-the-handbook",
    "href": "contributing.html#editing-the-handbook",
    "title": "Contributing to the Handbook",
    "section": "Editing the Handbook",
    "text": "Editing the Handbook\nAll IPA staff should feel empowered to edit this handbook. There are a few ways to edit the handbook.\nA typical workflow to edit the handbook is the following:\n\nMake edits.\nCommit changes to this repository.\nCreate a pull request, assign reviewers.\nApply reviewers’ suggestions, if any.\nMerge all changes to the main branch of the repository\n\nYou can contribute to this Handbook in a number of ways:\n\nFile an Issue on GitHub with recommended additions or edits.\nEdit pages of the Handbook on GitHub by clicking on the “Edit this page” link on any page of the Handbook.\n\n\n\n\nHandbook\n\n\n\nA little bit of Markdown\nMost of the handbook relies on Markdown as the computer language for writing content. In order to edit the handbook, it is helpful to have a basic understanding of Markdown, which is the main format in which this handbook’s content is written.\nUse the existing content of this handbook’s ipa-data-tech-handbook/docs folder as a reference for how to write in Markdown.\nThe following resources are helpful for getting to know the basics of Markdown:\n\nGitHub - Basic writing and formatting syntax\nGitHub - Working with advanced formatting\nGitHub Skills: Communicate using Markdown\nQuarto’s Guide to Markdown\nMarkdown Guide Cheat Sheet\n\n\n\nUse the GitHub browser interface to edit the handbook\nThe easiest way to edit the handbook is to use the GitHub Web IDE. Go to https://github.com/PovertyAction/ipa-data-tech-handbook/docs/ and click on the file you want to edit. Then click on the pencil icon in the top right corner of the file to start editing.\n\n\n\nEdit on GitHub\n\n\n\n\nUse the GitHub IDE to edit the handbook\nAnother option that GitHub provides is to edit the handbook documents using a Web-based integrated development environment (IDE).\n\n\n\nEdit with GitHub IDE\n\n\n\n\nModify the handbook locally\nNote that building the handbook from source code requires the following to be installed on your local computer (see Computer Setup for more information about software installation):\n\nwinget (Windows) or homebrew (MacOS/Linux) for package management and installation\ngit for source control management\njust for running common command line patterns\npixi for installing Python and managing virtual environments\n\nFirst, clone this repository to your local computer either via GitHub Desktop:\n\n\n\nClone Repository via GitHub Desktop\n\n\nor from the command line:\n# If using HTTPS\ngit clone https://github.com/PovertyAction/ipa-data-tech-handbook.git\n\n# If using SSH\ngit clone git@github.com:PovertyAction/ipa-data-tech-handbook.git\nThis repository uses a Justfile for collecting common command line actions that we run to set up the computing environment and build the assets of the handbook. Note that you should also have Git installed\nTo get started, make sure you have Just installed on your computer by running the following from the command line:\n\n\n\n\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install Git.Git Casey.Just prefix-dev.pixi GitHub.cli Posit.Quarto\n\n\nMac/Linux\nbrew install just pixi gh\n\n\n\nThis will make sure that you have the latest version of Just, as well as Pixi (installer for Python) and Quarto (for writing and compiling scientific and technical documents).\n\nWe use Just in order to make it easier for all IPA users to be productive with data and technology systems. The goal of using a Justfile is to help make the end goal of the user easier to achieve without needing to know or remember all of the technical details of how we get to that goal.\nWe use Rye to help ease use of Python. Rye provides a global system for creating and building computing environments for Python.\nWe use Quarto to allow users to focus on writing and data analytics. Writing in markdown, jupyter notebooks, python scripts, R scripts, etc. makes it easier to review, update, and deploy technical documentation.\n\nAs a shortcut, if you already have Just installed, you can run the following to install required software and build a python virtual environment that is used to build the handbook pages:\njust get-started\nNote: you may need to restart your terminal after running the command above to activate the installed software.\nAfter the required software is installed, you can activate the Python virtual environment:\n\n\n\nShell\nCommands\n\n\n\n\nBash\n.venv/Scripts/activate\n\n\nPowershell\n.venv/Scripts/activate.ps1\n\n\nNushell\noverlay use .venv/Scripts/activate.nu",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#preview-the-handbook",
    "href": "contributing.html#preview-the-handbook",
    "title": "Contributing to the Handbook",
    "section": "Preview the handbook",
    "text": "Preview the handbook\nTo build a version of the Handbook so that you can read it on your computer, run the following from a Terminal. Make sure that you are working from the root folder of this Git Repository:\njust preview-docs\nThe command line above references the ipa-data-tech-handbook/_quarto.yml file and creates the .html files for the handbook then launches a browser window with a local server of the handbook at http://localhost:3434/docs.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "guides/venv.html",
    "href": "guides/venv.html",
    "title": "Virtual Environments",
    "section": "",
    "text": "We encourage the use of virtual environments when working on shared projects. Virtual environments allow you to create an isolated environment for your project, which can help prevent conflicts between different projects that may require different versions of the same package.",
    "crumbs": [
      "Guides",
      "Virtual Environments"
    ]
  },
  {
    "objectID": "guides/venv.html#python-virtual-environments",
    "href": "guides/venv.html#python-virtual-environments",
    "title": "Virtual Environments",
    "section": "Python Virtual Environments",
    "text": "Python Virtual Environments\nWe recommend using pixi to manage Python virtual environments as it provides an overarching framework for managing Python installations and virtual environments. See information on pixi in the pixi documentation.",
    "crumbs": [
      "Guides",
      "Virtual Environments"
    ]
  },
  {
    "objectID": "guides/venv.html#r-virtual-environments",
    "href": "guides/venv.html#r-virtual-environments",
    "title": "Virtual Environments",
    "section": "R Virtual Environments",
    "text": "R Virtual Environments\nR virtual environments can be created using the renv package. See documentation for more information about how to use renv.",
    "crumbs": [
      "Guides",
      "Virtual Environments"
    ]
  },
  {
    "objectID": "guides/venv.html#docker",
    "href": "guides/venv.html#docker",
    "title": "Virtual Environments",
    "section": "Docker",
    "text": "Docker\nDocker is a tool that allows you to create, deploy, and run applications using containers. In some instances, it may be more appropriate to use Docker containers to manage your project environment, especially when there is a project environment that needs to be deployed to cloud computing services.",
    "crumbs": [
      "Guides",
      "Virtual Environments"
    ]
  },
  {
    "objectID": "guides/venv.html#learning-resources",
    "href": "guides/venv.html#learning-resources",
    "title": "Virtual Environments",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nA Complete Guide to Python Virtual Environments\nReal Python, Python Virtual Environments\nPython Virtual Environments\nR Virtual Environments",
    "crumbs": [
      "Guides",
      "Virtual Environments"
    ]
  },
  {
    "objectID": "guides/code_review.html",
    "href": "guides/code_review.html",
    "title": "Code Reviews & Pull Requests",
    "section": "",
    "text": "We use code reviews to ensure that code is well-written, well-documented, and follows best practices. Code reviews are an opportunity to learn from each other, share knowledge, and improve the quality of our codebase. This document outlines the process for code reviews and pull requests at IPA.",
    "crumbs": [
      "Guides",
      "Code Review"
    ]
  },
  {
    "objectID": "guides/code_review.html#as-someone-requesting-code-review",
    "href": "guides/code_review.html#as-someone-requesting-code-review",
    "title": "Code Reviews & Pull Requests",
    "section": "As someone requesting code review",
    "text": "As someone requesting code review\n\nBe courteous and respectful to your reviewer’s time.\nKeep your code review focused on changes that are relevant to review.\nExplain why the code changes are necessary.\nWhen relevant, include screenshots or screencasts to show the effect of the changes.\nTry to respond to every comment that the reviewer makes.\nMerge once you feel confident in the code and its impact on the project.\n\nRecommended reading: how to write the perfect pull request.",
    "crumbs": [
      "Guides",
      "Code Review"
    ]
  },
  {
    "objectID": "guides/code_review.html#as-a-code-reviewer",
    "href": "guides/code_review.html#as-a-code-reviewer",
    "title": "Code Reviews & Pull Requests",
    "section": "As a code reviewer",
    "text": "As a code reviewer\n\nCommunicate which ideas or comments you feel strongly about and those you don’t.\nDon’t get stuck on details that are not immediately relevant to allow the code author to move forward with their work.\nIdentify ways to simplify the code while still achieving the project’s goal\nIf relevant, offer alternative implementations, especially if they would simplify the code or make it easier to maintain in the long run.\nSeek to understand the author’s perspective\nApprove the pull request in a reasonable amount of time. If you are unable to review the code promptly, let the author know when you will be able to review it.\nRemember that you are here to provide feedback, not to be a gatekeeper.\n\nAbove is modified from Thoughtbot Code Review Guidelines",
    "crumbs": [
      "Guides",
      "Code Review"
    ]
  },
  {
    "objectID": "guides/code_review.html#use-templates-for-pull-requests",
    "href": "guides/code_review.html#use-templates-for-pull-requests",
    "title": "Code Reviews & Pull Requests",
    "section": "Use Templates for Pull Requests",
    "text": "Use Templates for Pull Requests\nFor each team or repository, we highly recommend creating a template pull requests. This helps to standardize the way in which pull requests are created and reviewed.\nAs an example of a pull request template, see the pull request template in this repository.\n\n\n\nPull Request Template",
    "crumbs": [
      "Guides",
      "Code Review"
    ]
  },
  {
    "objectID": "guides/code_review.html#code-review-process",
    "href": "guides/code_review.html#code-review-process",
    "title": "Code Reviews & Pull Requests",
    "section": "Code Review Process",
    "text": "Code Review Process\n\nCreate a Pull Request (PR) from a branch to the main branch.\nAdd a reviewer or multiple reviewers to the PR.\nReviewers will review the code and provide feedback.\nThe author of the PR will address the feedback and make changes.\nThe author will notify the reviewers that the changes have been made.\nThe reviewers will review the changes and approve the PR unless there is a need for additional revisions.\nOnce approved, the author can merge the PR into the main branch.",
    "crumbs": [
      "Guides",
      "Code Review"
    ]
  },
  {
    "objectID": "guides/code_review.html#learning-resources",
    "href": "guides/code_review.html#learning-resources",
    "title": "Code Reviews & Pull Requests",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nGitHub’s Guide to Pull Requests\nView a Pull Request in GitHub Desktop\nCreating a Pull Request Template",
    "crumbs": [
      "Guides",
      "Code Review"
    ]
  },
  {
    "objectID": "about/mmds.html",
    "href": "about/mmds.html",
    "title": "Minimum Must Dos",
    "section": "",
    "text": "To be launched…"
  },
  {
    "objectID": "about/foundations.html",
    "href": "about/foundations.html",
    "title": "Foundations",
    "section": "",
    "text": "To be launched…"
  },
  {
    "objectID": "software/quarto.html#what-is-quarto",
    "href": "software/quarto.html#what-is-quarto",
    "title": "Quarto",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto is a document authoring tool that allows you to create documents using markdown. Quarto is open source (MIT License) software developed and maintained by Posit. It is a powerful tool that allows you to create documents with a variety of formats such as HTML websites, PDF, PowerPoint, Word, and more. Quarto is a great tool for creating documents that are easy to read and share.\nThe following video provides a quick introduction to Quarto:",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "software/quarto.html#how-to-install-quarto",
    "href": "software/quarto.html#how-to-install-quarto",
    "title": "Quarto",
    "section": "How to install Quarto?",
    "text": "How to install Quarto?\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install Posit.Quarto\n\n\nMacOS\nbrew install --cask quarto\n\n\nLinux\nSee https://quarto.org/docs/get-started/",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "software/quarto.html#using-quarto",
    "href": "software/quarto.html#using-quarto",
    "title": "Quarto",
    "section": "Using Quarto",
    "text": "Using Quarto\nWe recommend using the Quarto Extension for Visual Studio Code. You can install the extension by searching for “Quarto” in the Extensions view (Ctrl+Shift+X). Alternatively, you can install the extension from the Visual Studio Code Marketplace.\nIf you use Jupyter Lab or RStudio, Quarto works directly with those tools as well.\nThe best place to start for learning how to use Quarto is Quarto’s tutorial, Hello, Quarto.\nAs an example, this repository uses Quarto to build the handbook.\nIn the root of the git repository, there is a _quarto.yml file that contains the metadata used to compile the handbook. Components of the handbook are written in Markdown, either standard Markdown (.md) or Quarto Markdown (.qmd). The benefit of standard markdown is that it is more portable and works with standard Markdown editors (e.g. GitHub), while Quarto markdown allows for computations that are embedded in the document. If you want more advanced formatting or computations, .qmd may be a preferable choice. The Quarto Documentation provides helpful guides on how to use Markdown as well as the added features that Quarto Markdown offers.\nFor an example of how to use Quarto within common academic and research workflows, see:",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "software/quarto.html#learning-resources",
    "href": "software/quarto.html#learning-resources",
    "title": "Quarto",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nTutorials:\n\nHello, Quarto\nComputations\nAuthoring\n\nQuarto Documentation\nQuarto Gallery of Examples",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "software/surveycto/scto_tools.html",
    "href": "software/surveycto/scto_tools.html",
    "title": "SCTO Tools for IPA staff",
    "section": "",
    "text": "To be launched…"
  },
  {
    "objectID": "software/sql.html",
    "href": "software/sql.html",
    "title": "SQL",
    "section": "",
    "text": "%load_ext sql\n%sql duckdb://\n\nLoading configurations from C:\\Users\\NKeleher\\code\\ipa-data-tech-handbook\\pyproject.toml.\n\n\nSettings changed:\n\n\n\n\n\n\n\nConfig\nvalue\n\n\n\n\nfeedback\n0\n\n\nautopandas\nFalse\n\n\nautopolars\nFalse\n\n\nautolimit\n0\n\n\ndisplaylimit\n10\nCreate a table from a CSV file.\n%%sql\nCREATE TABLE penguins AS SELECT * FROM '../assets/data/penguins.csv'\n\n\n\n\nCount\nInspect the columns of the table.\n%sqlcmd columns -t penguins\n\n\n\n\nname\ntype\nnullable\ndefault\nautoincrement\ncomment\n\n\n\n\nspecies\nVARCHAR\nTrue\nNone\nFalse\nNone\n\n\nisland\nVARCHAR\nTrue\nNone\nFalse\nNone\n\n\nbill_length_mm\nFLOAT\nTrue\nNone\nFalse\nNone\n\n\nbill_depth_mm\nFLOAT\nTrue\nNone\nFalse\nNone\n\n\nflipper_length_mm\nBIGINT\nTrue\nNone\nFalse\nNone\n\n\nbody_mass_g\nBIGINT\nTrue\nNone\nFalse\nNone\n\n\nsex\nVARCHAR\nTrue\nNone\nFalse\nNone\nQuery the table using a SELECT statement.\n%%sql\nSELECT *\nFROM '../assets/data/penguins.csv'\nLIMIT 3\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nMALE\n\n\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nFEMALE\n\n\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nFEMALE\nRun analytical operations on the data.\n%%sql\nSELECT species, COUNT(*) AS count\nFROM '../assets/data/penguins.csv'\nGROUP BY species\nORDER BY count DESC\n\n\n\n\nspecies\ncount\n\n\n\n\nAdelie\n152\n\n\nGentoo\n124\n\n\nChinstrap\n68\nUsing jupysql store SQL query results as an object in a Jupyter notebook.\n%%sql species_count &lt;&lt;\nSELECT species, COUNT(*) AS count\nFROM '../assets/data/penguins.csv'\nGROUP BY species\nORDER BY count DESC\nPlot the results of the query.\nax = %sqlplot bar --table '../assets/data/penguins.csv' --column species\n\n# customize plot (this is a matplotlib Axes object)\n_ = ax.set_title(\"Count of penguins by species\")\n\nRemoving NULLs, if there exists any from species",
    "crumbs": [
      "Software",
      "SQL"
    ]
  },
  {
    "objectID": "software/sql.html#coding-conventions",
    "href": "software/sql.html#coding-conventions",
    "title": "SQL",
    "section": "Coding Conventions",
    "text": "Coding Conventions\nUse SQLFluff to lint SQL code.\nAdd SQLFluff to your virtual environment using pixi:\npixi add sqlfluff --pypi\nAssuming SQLFluff is installed in your virtual environment using pixi, you can run the following command to lint SQL code:\npixi run sqlfluff fix --dialect duckdb\nSee the GitLab Data Team’s SQL Style Guide",
    "crumbs": [
      "Software",
      "SQL"
    ]
  },
  {
    "objectID": "software/sql.html#learning-resources",
    "href": "software/sql.html#learning-resources",
    "title": "SQL",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nSELECT Star SQL\nSQL Murder Mystery\nsql-workbench\nDuckDB SQL Introduction",
    "crumbs": [
      "Software",
      "SQL"
    ]
  },
  {
    "objectID": "software/coding_best_practices.html",
    "href": "software/coding_best_practices.html",
    "title": "Coding Best Practices",
    "section": "",
    "text": "To be launched…"
  },
  {
    "objectID": "software/vscode.html#what-is-visual-studio-code",
    "href": "software/vscode.html#what-is-visual-studio-code",
    "title": "Visual Studio Code",
    "section": "What is Visual Studio Code?",
    "text": "What is Visual Studio Code?\nVisual Studio Code, often referred to as “VS Code”, is a software tool for writing, editing, and developing text-based documents and programs. At IPA, we use a variety of tools for editing documents and writing code. However, we recommend using VS Code as a standard ecosystem for working on collaborative code-first data and technology projects. You may be more comfortable working with other tools like Stata Do File Editor, RStudio for R, or Jupyter Notebooks. We encourage you to work with the tools that you are most comfortable with. However, VS Code provides a common ecosystem for source-controlled, collaborative, polyglot development of data and technology solutions. We encourage IPA teams to contribute to this documentation in order to share best practices and useful settings or extensions.",
    "crumbs": [
      "Software",
      "VS Code"
    ]
  },
  {
    "objectID": "software/vscode.html#how-to-install-vs-code",
    "href": "software/vscode.html#how-to-install-vs-code",
    "title": "Visual Studio Code",
    "section": "How to Install VS Code?",
    "text": "How to Install VS Code?\nTo install VS Code, download and install the latest software version from the Visual Studio Code website or run the following from the command line if you have the Windows Package Manager, winget, installed:\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install Microsoft.VisualStudioCode\n\n\nMacOS\nbrew install --cask visual-studio-code\n\n\nLinux\nsudo snap install code --classic",
    "crumbs": [
      "Software",
      "VS Code"
    ]
  },
  {
    "objectID": "software/vscode.html#using-vs-code",
    "href": "software/vscode.html#using-vs-code",
    "title": "Visual Studio Code",
    "section": "Using VS Code",
    "text": "Using VS Code\nThe best starting point for familiarizing yourself with VS Code is the documentation.\nSome particularly helpful references in the documentation are:\n\nEditing with VS Code\nGit Source control in VS Code\nPython in VS Code",
    "crumbs": [
      "Software",
      "VS Code"
    ]
  },
  {
    "objectID": "software/vscode.html#recommended-extensions",
    "href": "software/vscode.html#recommended-extensions",
    "title": "Visual Studio Code",
    "section": "Recommended Extensions",
    "text": "Recommended Extensions\nThe core software and functionality in VS Code gives you a lot of useful tools for writing, editing, and collaborating. Additionally, you can add functionality through Extensions.\nSome helpful extensions are the following:\n\nPython Extension - language syntax for Python programming\nRuff - Python linting and code formatting\nR Extension - Interacting with R from VS Code\nGitHub Pull Requests - review and manage GitHub pull requests and issues in Visual Studio Code\nJupyter Extension - for developing with jupyter notebooks\nJust - support for Justfiles\nQuarto Extension - support for writing and building Quarto projects\nMarkdown All in One - support for Markdown\nMarkdown Preview Mermaid Support - support for Mermaid diagrams in Markdown\nConventional Commits - support for writing easy to understand commit messages",
    "crumbs": [
      "Software",
      "VS Code"
    ]
  },
  {
    "objectID": "software/git.html#what-is-git",
    "href": "software/git.html#what-is-git",
    "title": "Git",
    "section": "What is Git?",
    "text": "What is Git?\nGit is a distributed version control system that allows you to track changes in your codebase. It is widely used in software development to manage code changes and collaborate with other people working on or learning from the shared codebase.\nClick on the image below to watch a video with an introduction to Git for beginners:\n\n\n\nA brief introduction to Git for beginners",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git.html#how-to-install-git",
    "href": "software/git.html#how-to-install-git",
    "title": "Git",
    "section": "How to install Git?",
    "text": "How to install Git?\nInstall Git for Windows via winget. Git comes pre-installed with MacOS and Linux, if you can’t find it, try installing with Homebrew.\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install Git.Git\n\n\nMacOS\ngit --version\n\n\nLinux\ngit --version",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git.html#using-git",
    "href": "software/git.html#using-git",
    "title": "Git",
    "section": "Using Git",
    "text": "Using Git\nGit can be confusing and overwhelming. We recommend starting with a graphical user interface (GUI) to help you understand the basics of Git. GitHub Desktop is a good option or, if you use VS Code, you can use the built-in Git functionality (See VS Code documentation).\nClick on the image below to watch a video on basic Git commands:\n)\nHere are the basic commands you need to know to get started with Git:\n\ngit init\nCreate a new Git repository\ngit init\n\n\ngit clone\nClone a repository into a new directory For example, to clone the IPA handbook repository:\n# If using HTTPS\ngit clone https://github.com/PovertyAction/ipa-data-tech-handbook.git\n\n# If using SSH\ngit clone git@github.com:PovertyAction/ipa-data-tech-handbook.git\n\n\ngit checkout\nBranches are used to develop new code or modify existing code such that the “main” code is not affected until the new code is ready. To create a new branch, use:\ngit checkout -b new-branch-name\nThis checks out a new branch called new-branch-name. To switch back to the main branch, use:\ngit checkout main\nTo checkout a branch from the remote repository, use:\ngit fetch origin\ngit checkout --track origin/remote-branch-name\nTo push a branch to the remote repository, use:\ngit push origin new-branch-name\nTo delete a branch, use:\ngit branch -d new-branch-name\nList all local branches:\ngit branch --list\n\n\ngit add\nAdd files that have changed and are ready to be committed to the staging area. To add a file, file_name.md, use:\ngit add file_name.md\n\n\ngit commit\nCommit changes to the checked out branch.\nGood commit messages follow the following format:\ngit commit -m \"&lt;type&gt;: &lt;description&gt;\"\nTo commit changes with a message, use:\ngit commit -m \"feat: adding new feature to the codebase\"\n\n\ngit push\nSend changes to the remote repository. To push any commits to remote use the following:\ngit push origin new-branch-name\nIf you are pushing a new branch to the remote repository, use:\ngit push --set-upstream origin new-branch-name\nConsider adding the Conventional Commits extension to your VS Code to help you write good commit messages.",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git.html#best-practices",
    "href": "software/git.html#best-practices",
    "title": "Git",
    "section": "Best Practices",
    "text": "Best Practices\n\nAlways include a README file in your repository and keep it up to date with key information that anyone who visits your repository should know for using, replicating, or contributing to code in the repository.\nUse branches to develop new features or fix bugs. This helps to keep the main branch clean and stable.\nWrite clear and concise commit messages. A good commit message should describe what changes were made and why they were made. Refer to Conventional Commits for good practice in writing commit messages.\nPush changes to the remote repository frequently. This helps to keep your codebase up to date and allows others to collaborate with you.\nUse pull requests to propose changes to the main branch. Try to keep the pull request small such that there is a manageable amount of code to review.",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git.html#learning-resources",
    "href": "software/git.html#learning-resources",
    "title": "Git",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nGitHub’s YouTube Git for Beginners\nGitHub’s Git Cheat Sheet\ngit - the simple guide\nGit Best Practices\nHappy Git with R\nVisual Git Guide\nVisualizing Git with D3",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "teams/grds.html",
    "href": "teams/grds.html",
    "title": "Global Research and Data Support",
    "section": "",
    "text": "IPA’s Global Research and Data Support team is known as “GRDS”, pronounced like “guards.”\nOur team does three main things to support IPA’s hundreds of research projects around the world:\nSee the GRDS Team Portal for more details about GRDS.\nresearch support, email: researchsupport@poverty-action.org",
    "crumbs": [
      "Teams",
      "GRDS"
    ]
  },
  {
    "objectID": "teams/grds.html#additional-resources",
    "href": "teams/grds.html#additional-resources",
    "title": "Global Research and Data Support",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nGRDS Resources on Box\nGlobal Help Desk",
    "crumbs": [
      "Teams",
      "GRDS"
    ]
  },
  {
    "objectID": "teams/dse.html",
    "href": "teams/dse.html",
    "title": "Data Science and Engineering",
    "section": "",
    "text": "The Data Science and Engineering (DSE) team strives to be recognized as a knowledge source in data science for evidence based policy.\nIn order to achieve this vision, DSE will establish itself as leader in the field of applied machine learning and data visualization by developing, deploying, and scaling reliable data solutions that inform decisions that address global poverty.\nThe DSE team, in partnership with other IPA functions, focuses on the following four following workstreams:",
    "crumbs": [
      "Teams",
      "DSE"
    ]
  },
  {
    "objectID": "teams/dse.html#data-infrastructure",
    "href": "teams/dse.html#data-infrastructure",
    "title": "Data Science and Engineering",
    "section": "Data Infrastructure",
    "text": "Data Infrastructure\nDSE develops and maintains approaches to data that allow for greater efficiency in learning from IPA’s research and operational data. For this DSE partners closely with the GRDS and MIST teams.\n\nData Science and Machine Learning Capacity\nDSE works to establish an industry-leading and persistent capacity to apply methods from machine learning, causal inference, and data visualization to further IPA’s mission to discover and advance what works to improve the lives of people living in poverty.\n\n\nData Products and Services\nDSE supports the development of data applications and products that support decision-making within IPA’s programs and external partners.\n\n\nExternal Engagement\nDSE strives elevate IPA’s global profile to support evidence based policy through data insights and ethics in machine learning and artificial intelligence for development.",
    "crumbs": [
      "Teams",
      "DSE"
    ]
  },
  {
    "objectID": "teams/mist.html",
    "href": "teams/mist.html",
    "title": "Management and Information Systems Team",
    "section": "",
    "text": "The Global Management and Information System Team (MIST) support all IPA staff with any technology-related needs including but not limited to:\nFor technology support, email: support@poverty-action.org",
    "crumbs": [
      "Teams",
      "MIST"
    ]
  },
  {
    "objectID": "teams/mist.html#additional-resources",
    "href": "teams/mist.html#additional-resources",
    "title": "Management and Information Systems Team",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nMIST Resources on Box\nGlobal Help Desk",
    "crumbs": [
      "Teams",
      "MIST"
    ]
  },
  {
    "objectID": "teams/ppi.html",
    "href": "teams/ppi.html",
    "title": "Poverty Probability Index",
    "section": "",
    "text": "The Poverty Probability Index (PPI®) is a poverty measurement tool for organizations and businesses with a mission to serve the poor. The PPI is statistically-sound, yet simple to use: the answers to 10 questions about a household’s characteristics and asset ownership are scored to compute the likelihood that the household is living below the poverty line. With the PPI, organizations can identify the clients, customers, or employees who are most likely to be poor, integrating objective poverty data into their assessments and strategic decision-making.\nThe PPI is currently housed at Innovations for Poverty Action (IPA).\nFor more information, see Poverty Probability Index.",
    "crumbs": [
      "Teams",
      "PPI"
    ]
  },
  {
    "objectID": "software/github.html#what-is-github",
    "href": "software/github.html#what-is-github",
    "title": "GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\nGitHub is a platform for hosting and collaborating on computer code. It is a place where you can store your code, track changes, and collaborate with others. GitHub is built on top of Git, a version control system that allows you to track changes in your codebase over time. GitHub provides a web-based interface for interacting with Git repositories, as well as a desktop application (GitHub Desktop) and a command-line interface (CLI) for working with Git repositories on your local computer.",
    "crumbs": [
      "Software",
      "GitHub"
    ]
  },
  {
    "objectID": "software/github.html#how-to-install-github-software",
    "href": "software/github.html#how-to-install-github-software",
    "title": "GitHub",
    "section": "How to install GitHub Software?",
    "text": "How to install GitHub Software?\nThere are two main options to consider for interacting with GitHub from your local computer:\n\nGitHub Desktop (Recommended)- GUI for working with Git repositories.\nGitHub CLI - Command-line interface for working with Git repositories. For advanced usage.\n\nIf you are new to Git or prefer working with a graphical user interface (GUI), we recommend that you start with GitHub Desktop. The Desktop interface provides a more transparent way of understanding source control and interacting with remote code repositories on GitHub.\n\nGitHub Desktop\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install GitHub.GithubDesktop\n\n\nMacOS\nbrew install --cask github\n\n\nLinux\nNot available\n\n\n\n\n\nGitHub CLI\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install GitHub.cli\n\n\nMacOS\nbrew install gh\n\n\nLinux\nbrew install gh",
    "crumbs": [
      "Software",
      "GitHub"
    ]
  },
  {
    "objectID": "software/github.html#authenticating-github",
    "href": "software/github.html#authenticating-github",
    "title": "GitHub",
    "section": "Authenticating GitHub",
    "text": "Authenticating GitHub\n\nGitHub Desktop\nSee instructions here for getting started with GitHub Desktop.\nIn the File menu, select “Options” and then in the “Accounts” options select “Sign in to GitHub.com” and “Continue with browser” to authenticate with your GitHub account.\n\n\n\nGitHub Desktop Authentication\n\n\n\n\nGitHub CLI\nSee the GitHub CLI Manual for more information on how to authenticate with GitHub CLI.\nTo authenticate with GitHub CLI, run the following command in your terminal:\ngh auth login\nThen walk through the prompts:\n\nWhat account do you want to log into? GitHub.com\nWhat is your preferred protocol for Git operations on this host? HTTPS\nAuthenticate Git with your GitHub credentials? (Y/n) Y\nHow would you like to authenticate GitHub CLI? Login with a web browser",
    "crumbs": [
      "Software",
      "GitHub"
    ]
  },
  {
    "objectID": "software/github.html#using-github",
    "href": "software/github.html#using-github",
    "title": "GitHub",
    "section": "Using GitHub",
    "text": "Using GitHub\nWithin a GitHub repository, there are four main aspects that you should be familiar with:\n\nCode: The files and directories that make up your project.\nIssues: A place to discuss and track tasks, bugs, and enhancements for a project.\nPull Requests: A way to propose changes to a repository and discuss them with others.\n\n\n\n\nGitHub Repository Aspects\n\n\nIn the Code section of a GitHub repository, you can view the files that make up the project codebase. We work with Branches to manage different versions of the codebase. The main branch is the default branch that GitHub uses for the codebase. When you want to make changes to the codebase, you create a new branch from the main branch, make your changes, and then create a Pull Request to merge your changes back into the main branch.\nFor planning changes to the codebase, you can use Issues to track tasks, bugs, and enhancements. Issues can be assigned to team members, labeled, and linked to Pull Requests. Issues can also be used to discuss changes to the codebase before making them.",
    "crumbs": [
      "Software",
      "GitHub"
    ]
  },
  {
    "objectID": "software/github.html#learning-resources",
    "href": "software/github.html#learning-resources",
    "title": "GitHub",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nGitHub Skills provides a lot of relevant resources for learning how to use GitHub. Some good starting points include:\n\nIntroduction to Github\nReview Pull Requests\n\nGitHub Foundations Certificate",
    "crumbs": [
      "Software",
      "GitHub"
    ]
  },
  {
    "objectID": "software/stata.html#what-is-stata",
    "href": "software/stata.html#what-is-stata",
    "title": "Stata",
    "section": "What is Stata?",
    "text": "What is Stata?\nStata is a statistical software package that is commonly used in the social sciences and economics. It is widely used at IPA for data analysis and management. It offers a comprehensive library of methods for data cleaning, descriptive statistics, and econometric analysis. Stata is very well suited for research data workflows and research design tasks, including power calculations, sample design adjustments, panel data analysis, time series analysis, etc. See Stata Features for a full list of what Stata makes available.",
    "crumbs": [
      "Software",
      "Stata"
    ]
  },
  {
    "objectID": "software/stata.html#how-to-install-stata",
    "href": "software/stata.html#how-to-install-stata",
    "title": "Stata",
    "section": "How to install Stata?",
    "text": "How to install Stata?\nIPA staff can download and install the relevant version (.exe for Windows, .dmg for MacOS, or .tar.gz for Linux) from IPA on the Box installation packages.",
    "crumbs": [
      "Software",
      "Stata"
    ]
  },
  {
    "objectID": "software/stata.html#coding-conventions",
    "href": "software/stata.html#coding-conventions",
    "title": "Stata",
    "section": "Coding Conventions",
    "text": "Coding Conventions\nSee the following resources for coding conventions in Stata:\n\nDIME Analytics Stata Style Guide\nSean Higgins’s Stata guide on GitHub.\nCoding and Data for the Social Sciences, by Matthew Gentzkow and Jesse Shapiro",
    "crumbs": [
      "Software",
      "Stata"
    ]
  },
  {
    "objectID": "software/stata.html#using-stata-from-python",
    "href": "software/stata.html#using-stata-from-python",
    "title": "Stata",
    "section": "Using Stata from Python",
    "text": "Using Stata from Python\nWithin a Python script or Jupyter Notebook, you can call Stata using pystata.\n\nimport stata_setup\n\n# set configuration to the path where Stata is installed and the flavor of Stata\n# in the case below, we're using Stata 18 SE\nstata_setup.config(\"C:/Program Files/Stata18/\", \"se\")\n\n\n  ___  ____  ____  ____  ____ ®\n /__    /   ____/   /   ____/      StataNow 18.5\n___/   /   /___/   /   /___/       SE—Standard Edition\n\n Statistics and Data Science       Copyright 1985-2023 StataCorp LLC\n                                   StataCorp\n                                   4905 Lakeway Drive\n                                   College Station, Texas 77845 USA\n                                   800-782-8272        https://www.stata.com\n                                   979-696-4600        service@stata.com\n\nStata license: Unlimited-user network, expiring 22 Jan 2025\nSerial number: 401809300803\n  Licensed to: Niall Keleher\n               Innovations for Poverty Action\n\nNotes:\n      1. Unicode is supported; see help unicode_advice.\n      2. Maximum number of variables is set to 5,000 but can be increased;\n          see help set_maxvar.\n\n\n\nCall Stata using pystata API functions\n\nfrom pystata import stata\n\n\nstata.run(\n    \"\"\"\n    sysuse auto, clear\n    reg mpg price i.foreign\n    \"\"\"\n)\n\n\n. \n.     sysuse auto, clear\n(1978 automobile data)\n\n.     reg mpg price i.foreign\n\n      Source |       SS           df       MS      Number of obs   =        74\n-------------+----------------------------------   F(2, 71)        =     23.01\n       Model |  960.866305         2  480.433152   Prob &gt; F        =    0.0000\n    Residual |  1482.59315        71  20.8815937   R-squared       =    0.3932\n-------------+----------------------------------   Adj R-squared   =    0.3761\n       Total |  2443.45946        73  33.4720474   Root MSE        =    4.5696\n\n------------------------------------------------------------------------------\n         mpg | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n       price |   -.000959   .0001815    -5.28   0.000     -.001321    -.000597\n             |\n     foreign |\n    Foreign  |   5.245271   1.163592     4.51   0.000     2.925135    7.565407\n       _cons |   25.65058   1.271581    20.17   0.000     23.11512    28.18605\n------------------------------------------------------------------------------\n\n.     \n. \n\n\nOr use IPython magic commands to run Stata code in a Jupyter Notebook.\n\n%%stata\nsysuse auto, clear\ndescribe\n\n\n. sysuse auto, clear\n(1978 automobile data)\n\n. describe\n\nContains data from C:\\Program Files\\Stata18/ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2022 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n. \n\n\n\n%stata scatter mpg price",
    "crumbs": [
      "Software",
      "Stata"
    ]
  },
  {
    "objectID": "software/stata.html#data-visualization",
    "href": "software/stata.html#data-visualization",
    "title": "Stata",
    "section": "Data Visualization",
    "text": "Data Visualization\nConsider installing the ipaplots for the IPA graph schema in Stata.",
    "crumbs": [
      "Software",
      "Stata"
    ]
  },
  {
    "objectID": "software/stata.html#learning-references",
    "href": "software/stata.html#learning-references",
    "title": "Stata",
    "section": "Learning References",
    "text": "Learning References\nFor more information on learning and using Stata, see the IPA-Stata-Trainings repository on GitHub.\n\nStata Video Tutorials",
    "crumbs": [
      "Software",
      "Stata"
    ]
  },
  {
    "objectID": "software/justfile.html#what-is-a-justfile",
    "href": "software/justfile.html#what-is-a-justfile",
    "title": "Justfile",
    "section": "What is a Justfile?",
    "text": "What is a Justfile?\nJust is a command runner that can be used to define and run common command line actions that we run to set up the computing environment and build the assets of a project.\nThe Justfile is how we write “recipes” of commands that we plan to run repetitively. You are encourage to set up, use, and add to the Justfile to make your work more efficient. This will help yourself and your colleagues know how to run common tasks that are needed to work within a project’s codebase."
  },
  {
    "objectID": "software/justfile.html#how-to-install-just",
    "href": "software/justfile.html#how-to-install-just",
    "title": "Justfile",
    "section": "How to install Just?",
    "text": "How to install Just?\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install Casey.Just\n\n\nMacOS\nbrew install just\n\n\nLinux\nbrew install just"
  },
  {
    "objectID": "software/justfile.html#learning-resources",
    "href": "software/justfile.html#learning-resources",
    "title": "Justfile",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nJust Documentation\nUsing the just Task Runner"
  },
  {
    "objectID": "software/python.html#what-is-python",
    "href": "software/python.html#what-is-python",
    "title": "Python",
    "section": "What is Python?",
    "text": "What is Python?\nPython is a high-level, general-purpose programming language that is widely used in data science, machine learning, and web development. It has a large standard library and a vibrant community that provides a wide range of libraries and tools for various applications. As such, Python provides a general-purpose ecosystem that can be used for a wide range of applications.",
    "crumbs": [
      "Software",
      "Python"
    ]
  },
  {
    "objectID": "software/python.html#how-to-install-python",
    "href": "software/python.html#how-to-install-python",
    "title": "Python",
    "section": "How to install Python?",
    "text": "How to install Python?\nThere are many ways to install Python. We recommend using Python in a virtual environment to avoid conflicts with other Python installations on your system.\nWe recommend using pixi as a a simple way to create and manage Python virtual environments.\nYou can manage the python packages that are installed in the virtual environment using a pyproject.toml file. See the pyproject.toml example in this repository for an example of how to manage Python packages. To add package dependencies to the virtual environment, using pixi, you can run:\nFirst, install pixi using winget (Windows) or brew (MacOS/Linux):\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install prefix-dev.pixi\n\n\nMacOS\nbrew install pixi\n\n\nLinux\nbrew install pixi\n\n\n\nAdd libraries to the virtual environment using pixi add ...:\n\n&gt; pixi add jupyterlab pandas matplotlib seaborn --pypi",
    "crumbs": [
      "Software",
      "Python"
    ]
  },
  {
    "objectID": "software/python.html#coding-conventions",
    "href": "software/python.html#coding-conventions",
    "title": "Python",
    "section": "Coding Conventions",
    "text": "Coding Conventions\nWe highly recommend working with a virtual environment to manage Python dependencies. The pyproject.toml is the preferred way to keep track of python dependencies as well as project-specific python conventions.\nWe recommend using Ruff to enforce linting and formatting rules. In most cases you can use the default linting and formatting rules provided by ruff. However, you can customize the rules by modifying the [tool.ruff] section of the pyproject.toml file in the root of your project. for more about the configuration options, see the Ruff documentation.\nIf you are working in a virtual environment created in this repository, you automatically have access toRuff via just lint-py and just fmt-python commands to lint and format your code.\nFor more inspiration, see the GitLab Data Team’s Python Guide and Google’s Python Style Guide.",
    "crumbs": [
      "Software",
      "Python"
    ]
  },
  {
    "objectID": "software/python.html#example-usage",
    "href": "software/python.html#example-usage",
    "title": "Python",
    "section": "Example Usage",
    "text": "Example Usage\nLet’s load an example World Bank data via Gapminder using the causaldata package.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.formula.api as sm\nfrom causaldata import gapminder\n\nLoad the Gapminder data as a pandas DataFrame:\n\ndf = gapminder.load_pandas().data\n\nWe can check the dimensions of the DataFrame using df.info():\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1704 entries, 0 to 1703\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   country    1704 non-null   object \n 1   continent  1704 non-null   object \n 2   year       1704 non-null   int64  \n 3   lifeExp    1704 non-null   float64\n 4   pop        1704 non-null   int64  \n 5   gdpPercap  1704 non-null   float64\ndtypes: float64(2), int64(2), object(2)\nmemory usage: 80.0+ KB\n\n\nLet’s take a look at the first few rows of the DataFrame using df.head():\n\ndf.head()\n\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\n\n\n\n\n0\nAfghanistan\nAsia\n1952\n28.801\n8425333\n779.445314\n\n\n1\nAfghanistan\nAsia\n1957\n30.332\n9240934\n820.853030\n\n\n2\nAfghanistan\nAsia\n1962\n31.997\n10267083\n853.100710\n\n\n3\nAfghanistan\nAsia\n1967\n34.020\n11537966\n836.197138\n\n\n4\nAfghanistan\nAsia\n1972\n36.088\n13079460\n739.981106\n\n\n\n\n\n\n\nTake a look at the relationship between GDP per Capita and Life Expectancy:\n\nsns.scatterplot(x=\"gdpPercap\", y=\"lifeExp\", hue=\"continent\", data=df).set(\n    xscale=\"log\", ylabel=\"Life Expectancy\", xlabel=\"GDP per Capita\"\n)\n\n\n\n\n\n\n\n\nSeparate the data by year, focusing on 1957 and 2007:\n\nsns.relplot(\n    data=df.where(df[\"year\"].isin([1957, 2007])),\n    x=\"gdpPercap\",\n    y=\"lifeExp\",\n    col=\"year\",\n    hue=\"continent\",\n    col_wrap=1,\n    kind=\"scatter\",\n    palette=\"muted\",\n).set(xscale=\"log\", ylabel=\"Life Expectancy\", xlabel=\"GDP per Capita\")",
    "crumbs": [
      "Software",
      "Python"
    ]
  },
  {
    "objectID": "software/python.html#learning-resources",
    "href": "software/python.html#learning-resources",
    "title": "Python",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nThe Python Tutorial\nPython Data Science Handbook\nEfficient Python for Data Scientists\nThe Hitchhiker’s Guide to Python",
    "crumbs": [
      "Software",
      "Python"
    ]
  },
  {
    "objectID": "software/ml.html",
    "href": "software/ml.html",
    "title": "Machine Learning",
    "section": "",
    "text": "To be launched…"
  },
  {
    "objectID": "software/surveycto/scto_best_practices.html",
    "href": "software/surveycto/scto_best_practices.html",
    "title": "SCTO Best Practices",
    "section": "",
    "text": "To be launched…"
  },
  {
    "objectID": "software/surveycto.html#what-is-git",
    "href": "software/surveycto.html#what-is-git",
    "title": "Git",
    "section": "What is Git?",
    "text": "What is Git?\nGit is a distributed version control system that allows you to track changes in your codebase. It is widely used in software development to manage code changes and collaborate with other people working on or learning from the shared codebase.\nClick on the image below to watch a video with an introduction to Git for beginners:\n\n\n\nA brief introduction to Git for beginners"
  },
  {
    "objectID": "software/surveycto.html#how-to-install-git",
    "href": "software/surveycto.html#how-to-install-git",
    "title": "Git",
    "section": "How to install Git?",
    "text": "How to install Git?\nInstall Git for Windows via winget. Git comes pre-installed with MacOS and Linux, if you can’t find it, try installing with Homebrew.\n\n\n\nPlatform\nCommands\n\n\n\n\nWindows\nwinget install Git.Git\n\n\nMacOS\ngit --version\n\n\nLinux\ngit --version"
  },
  {
    "objectID": "software/surveycto.html#using-git",
    "href": "software/surveycto.html#using-git",
    "title": "Git",
    "section": "Using Git",
    "text": "Using Git\nGit can be confusing and overwhelming. We recommend starting with a graphical user interface (GUI) to help you understand the basics of Git. GitHub Desktop is a good option or, if you use VS Code, you can use the built-in Git functionality (See VS Code documentation).\nClick on the image below to watch a video on basic Git commands:\n)\nHere are the basic commands you need to know to get started with Git:\n\ngit init\nCreate a new Git repository\ngit init\n\n\ngit clone\nClone a repository into a new directory For example, to clone the IPA handbook repository:\n# If using HTTPS\ngit clone https://github.com/PovertyAction/ipa-data-tech-handbook.git\n\n# If using SSH\ngit clone git@github.com:PovertyAction/ipa-data-tech-handbook.git\n\n\ngit checkout\nBranches are used to develop new code or modify existing code such that the “main” code is not affected until the new code is ready. To create a new branch, use:\ngit checkout -b new-branch-name\nThis checks out a new branch called new-branch-name. To switch back to the main branch, use:\ngit checkout main\nTo checkout a branch from the remote repository, use:\ngit fetch origin\ngit checkout --track origin/remote-branch-name\nTo push a branch to the remote repository, use:\ngit push origin new-branch-name\nTo delete a branch, use:\ngit branch -d new-branch-name\nList all local branches:\ngit branch --list\n\n\ngit add\nAdd files that have changed and are ready to be committed to the staging area. To add a file, file_name.md, use:\ngit add file_name.md\n\n\ngit commit\nCommit changes to the checked out branch.\nGood commit messages follow the following format:\ngit commit -m \"&lt;type&gt;: &lt;description&gt;\"\nTo commit changes with a message, use:\ngit commit -m \"feat: adding new feature to the codebase\"\n\n\ngit push\nSend changes to the remote repository. To push any commits to remote use the following:\ngit push origin new-branch-name\nIf you are pushing a new branch to the remote repository, use:\ngit push --set-upstream origin new-branch-name\nConsider adding the Conventional Commits extension to your VS Code to help you write good commit messages."
  },
  {
    "objectID": "software/surveycto.html#best-practices",
    "href": "software/surveycto.html#best-practices",
    "title": "Git",
    "section": "Best Practices",
    "text": "Best Practices\n\nAlways include a README file in your repository and keep it up to date with key information that anyone who visits your repository should know for using, replicating, or contributing to code in the repository.\nUse branches to develop new features or fix bugs. This helps to keep the main branch clean and stable.\nWrite clear and concise commit messages. A good commit message should describe what changes were made and why they were made. Refer to Conventional Commits for good practice in writing commit messages.\nPush changes to the remote repository frequently. This helps to keep your codebase up to date and allows others to collaborate with you.\nUse pull requests to propose changes to the main branch. Try to keep the pull request small such that there is a manageable amount of code to review."
  },
  {
    "objectID": "software/surveycto.html#learning-resources",
    "href": "software/surveycto.html#learning-resources",
    "title": "Git",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nGitHub’s YouTube Git for Beginners\nGitHub’s Git Cheat Sheet\ngit - the simple guide\nGit Best Practices\nHappy Git with R\nVisual Git Guide\nVisualizing Git with D3"
  },
  {
    "objectID": "about/ipa_staff.html",
    "href": "about/ipa_staff.html",
    "title": "For IPA Staff",
    "section": "",
    "text": "To be launched…"
  },
  {
    "objectID": "about/ipa_researchers.html",
    "href": "about/ipa_researchers.html",
    "title": "For IPA Researchers",
    "section": "",
    "text": "To be launched…"
  },
  {
    "objectID": "guides/pre_commit_hooks.html#what-are-pre-commit-hooks",
    "href": "guides/pre_commit_hooks.html#what-are-pre-commit-hooks",
    "title": "Pre-commit hooks",
    "section": "What are pre-commit hooks?",
    "text": "What are pre-commit hooks?\nPre-commit hooks are scripts that run before a commit is made to a repository. They can be used to check for common issues in code, such as syntax errors, formatting issues, or security vulnerabilities. Pre-commit hooks can help ensure that code is clean, consistent, and secure before it is committed to a repository.",
    "crumbs": [
      "Guides",
      "pre-commit"
    ]
  },
  {
    "objectID": "guides/pre_commit_hooks.html#why-use-pre-commit-hooks",
    "href": "guides/pre_commit_hooks.html#why-use-pre-commit-hooks",
    "title": "Pre-commit hooks",
    "section": "Why use pre-commit hooks?",
    "text": "Why use pre-commit hooks?\nPre-commit hooks are used to enforce common coding standards, run tests, and check for security vulnerabilities before code is committed to a repository. By using pre-commit hooks, you can catch issues early in the development process. This can help prevent bugs, improve code quality, and make it easier to collaborate with other developers.",
    "crumbs": [
      "Guides",
      "pre-commit"
    ]
  },
  {
    "objectID": "guides/pre_commit_hooks.html#installing-pre-commit-hooks",
    "href": "guides/pre_commit_hooks.html#installing-pre-commit-hooks",
    "title": "Pre-commit hooks",
    "section": "Installing pre-commit hooks",
    "text": "Installing pre-commit hooks\nAdd pre-commit to your project by running the following command:\npixi install pre-commit",
    "crumbs": [
      "Guides",
      "pre-commit"
    ]
  },
  {
    "objectID": "guides/pre_commit_hooks.html#example-pre-commit-hooks",
    "href": "guides/pre_commit_hooks.html#example-pre-commit-hooks",
    "title": "Pre-commit hooks",
    "section": "Example pre-commit hooks",
    "text": "Example pre-commit hooks\nIn the .pre-commit-config.yaml, this repository provides an example of a pre-commit hooks that run the following hooks before a commit is made:\n\nruff - Automatically linting and formatting of Python code\nvalidate-pyproject - Validate the pyproject.toml file\ncheck-json - Check JSON files for syntax errors\ncheck-toml - Check TOML files for syntax errors\ncheck-merge-conflict - Check for merge conflicts in files\nmarkdownlint-fix - Automatically lint and format Markdown files\ntypos - Check for common spelling errors in Markdown files\n\nTo run these hooks on all files, run the following command:\npixi run pre-commit run --all-files\nAlternatively, if you have installed pre-commit every time you run git commit, the hooks will, by default, run automatically.",
    "crumbs": [
      "Guides",
      "pre-commit"
    ]
  },
  {
    "objectID": "guides/pre_commit_hooks.html#learning-resources",
    "href": "guides/pre_commit_hooks.html#learning-resources",
    "title": "Pre-commit hooks",
    "section": "Learning Resources",
    "text": "Learning Resources\n\nPre-commit documentation",
    "crumbs": [
      "Guides",
      "pre-commit"
    ]
  },
  {
    "objectID": "guides/computer_setup.html",
    "href": "guides/computer_setup.html",
    "title": "Computer Setup",
    "section": "",
    "text": "This page is meant to help guide you in setting up your laptop with common software used by data and technology teams at IPA. Most software covered in this page have their own page in this handbook. We encourage you to refer to for usage of each software. And please contribute to those pages so that others at IPA (including your future self) are able to learn about what works well for interacting with data at IPA.\nThe information below is for getting started with core software that IPA uses for editing, reviewing, and deploying code for software development, data engineering, analytical solutions, and data infrastructure.",
    "crumbs": [
      "Guides",
      "Computer Setup"
    ]
  },
  {
    "objectID": "guides/computer_setup.html#package-manager",
    "href": "guides/computer_setup.html#package-manager",
    "title": "Computer Setup",
    "section": "Package Manager",
    "text": "Package Manager\nA package manager helps to standardize how you install and update software on your computer. Generally, you want to use a package manager to install any programs that are used globally on your computer. By “globally”, we mean that it is a program that is used across many projects and computing environments.\n\nWindows\nIf using a Windows computer with Windows 10 or later, we encourage you to use the Windows Package Manager, winget. However, if you do not have Windows 10+, you can achieve a similar package management experience with either chocolatey or scoop.\n\n\nCheck to see if you have winget\n\n\nOpen Windows Powershell (See PowerShell 101 if new to Windows PowerShell)\nCheck to see if you have winget installed: \nIf you do not see a version number for winget. Follow the Microsoft instructions to Install winget\n\n\nInstall packages on Windows\n# Install a single program (e.g. GitHub for command line)\nwinget install GitHub.cli\n\n# Install multiple programs (Just, pixi for Python)\nwinget install Casey.Just prefix-dev.pixi\n\n\nMacOS/Linux\nOn MacOS, it is recommended that you use Homebrew as a package manager. On Linux you can use Homebrew or Snap. This may be relevant if you are working in the Windows Subsystem Linux (WSL).\n# Install a single program (e.g. GitHub for command line)\nbrew install gh\n\n# Install multiple programs (Just, Rye for Python)\nbrew install just pixi\nSee the Virtual Environment section of the handbook for more information on using virtual environments.\n\n\nAdditional Software\nThe preceding package manager examples can be used to install the majority of the software covered in this Handbook. Note that there are some exceptions to software available via a package manager. For example, Stata needs to be installed by first downloading the .exe for Windows, .dmg for MacOS, or .tar.gz for Linux.\n\nGet the required Stata version provided by IPA on the Box installation packages.",
    "crumbs": [
      "Guides",
      "Computer Setup"
    ]
  },
  {
    "objectID": "guides/computer_setup.html#terminal",
    "href": "guides/computer_setup.html#terminal",
    "title": "Computer Setup",
    "section": "Terminal",
    "text": "Terminal\nIn Windows, we recommend using the Windows Terminal. However, there are several other options for terminals. Select what you feel most comfortable with. The same is true for MacOS and Linux where there are many Terminal options to select from.\n# Windows Terminal\nwinget install Microsoft.WindowsTerminal",
    "crumbs": [
      "Guides",
      "Computer Setup"
    ]
  },
  {
    "objectID": "guides/computer_setup.html#shell",
    "href": "guides/computer_setup.html#shell",
    "title": "Computer Setup",
    "section": "Shell",
    "text": "Shell\nYou are free to choose whichever shell works best for your workflow and style. Here are the common shell options you may want to consider:\n\nBash\nBash comes pre-installed with MacOS and Linux. Git Bash is included with the Git for Windows installation.\n# Install git for Windows\nwinget install Git.Git\n\n\nNushell\nNushell is a cross operating system shell with a data pipeline focus.\n# Windows\nwinget install Nushell.Nushell\n\n# MacOS/Linux\nbrew install nu\n\n\nWindows PowerShell\nWindows PowerShell is often the default shell on Windows.\n# Windows (install or upgrade)\nwinget install Microsoft.PowerShell\n\n# MacOS\nbrew install powershell/tap/powershell\n\n# Linux\n# docs: https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu\nOptionally, you can install Starship for shell prompt customization.\n# Windows\nwinget install Starship.Starship\n\n# MacOS/Linux\nbrew install starship\nFollow the starship installation instructions for using starship with your preferred shell, for example, if using Nushell, run:\nmkdir ~/.cache/starship\nstarship init nu | save -f ~/.cache/starship/init.nu\nYou can set the Starship configuration to your liking in a ~/.config/starship.toml file. For example you could use the jetpack preset configuration by running:\n# starship configuration\nmkdir ~/.config\nstarship preset jetpack -o ~/.config/starship.toml",
    "crumbs": [
      "Guides",
      "Computer Setup"
    ]
  },
  {
    "objectID": "guides/computer_setup.html#gitgithub",
    "href": "guides/computer_setup.html#gitgithub",
    "title": "Computer Setup",
    "section": "Git/GitHub",
    "text": "Git/GitHub\nYou will need to have git installed on computer if you want to edit, test, or review source code and documentation locally.\nWe recommend installing GitHub Desktop if you are new to using git or prefer a GUI to the command line.\n# Windows\nwinget install GitHub.GithubDesktop\n\n# MacOS\nbrew install  --cask github\n\n## GitHub Desktop is not available on Linux\nSee the Git section of the handbook for more information on using git and the GitHubsection section for more information on using GitHub.",
    "crumbs": [
      "Guides",
      "Computer Setup"
    ]
  },
  {
    "objectID": "guides/computer_setup.html#visual-studio-code",
    "href": "guides/computer_setup.html#visual-studio-code",
    "title": "Computer Setup",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nYou are free to chose the Integrated Development Environment (IDE) of your choice. However, we recommend Visual Studio Code because integration with GitHub is built in and it provides a rich set of extensions to improve code quality and review.\n# Windows\nwinget install Microsoft.VisualStudioCode\n\n# MacOS\nbrew install --cask visual-studio-code\n\n# Linux\nsudo snap install code --classic\nSee the Visual Studio Code section of the handbook for more information on using Visual Studio Code.",
    "crumbs": [
      "Guides",
      "Computer Setup"
    ]
  },
  {
    "objectID": "guides/computer_setup.html#quarto",
    "href": "guides/computer_setup.html#quarto",
    "title": "Computer Setup",
    "section": "Quarto",
    "text": "Quarto\nFor technical documentation and literate programming, we recommend using Quarto because of it’s rich suite of publishing tools that integrate notebooks (e.g. ipynb, .Rmd), and computer scripts (e.g. .py, .r, .md).\n# Windows\nwinget install Posit.Quarto\n\n# MacOS\nbrew install --cask quarto\n\n# Linux\n# download and install from https://quarto.org/docs/get-started/\nSee the Quarto section of the handbook for more information on using Quarto.",
    "crumbs": [
      "Guides",
      "Computer Setup"
    ]
  },
  {
    "objectID": "index.html#about-the-handbook",
    "href": "index.html#about-the-handbook",
    "title": "IPA Data Science, Engineering, and Technology Handbook",
    "section": "About the Handbook",
    "text": "About the Handbook\nWelcome to IPA’s Handbook for Data Science, Engineering, and Technology!\nThis handbook is intended as a living document to assist IPA staff and collaborators with common practices for writing code and working with data. The handbook will never be comprehensive of every possible software, data object, or shared practice. However, IPA staff working with data and technology are encouraged to use this handbook as a reference and a shared project to give tips and advice for working collaboratively with data analysis and software development.\n\nGetting Started\nTo get started with software covered in this handbook, read Computer Setup to learn how to set up your computer for data analysis and software development.\n\n\nContributing\nFor instructions on how to contribute to this handbook, see Contributing to the Handbook.\nAlso, see the Code Review guide for information on how to conduct code reviews.\n\n\nUsing Software Tools\nFor information about specific software, see the respective pages under the Software directory.\nHere are some specific software that this guide covers:\n\nGit\nGithub\nVS Code\nQuarto\nPython\nand more!\n\n\n\nAcknowledgements\nThis handbook is a collaboration between multiple IPA Teams including Data Science and Engineering (DSE), Management and Information Systems Team (MIST), Global Research and Data Support, and Poverty Probability Index (PPI®).\nThe handbook is inspired by the Gitlab Data Team Handbook.",
    "crumbs": [
      "Home"
    ]
  }
]