{
  "hash": "887ca8660e522965857be1e3935466ab",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: SQL\n---\n\n## What is SQL?\n\nSQL (pronounced \"sequel\") stands for Structured Query Language. It is a standard\nlanguage for accessing and manipulating databases. SQL is used to organize data in a\ndatabase as well as as questions of that data.\n\nThe traditional use of SQL is in relational databases, but it can also be used in other\ntypes of databases. In the examples below, we use [duckdb](https://duckdb.org/) which\nhas become a leading option for analytical workflows across a diverse set of data\nstorage types (e.g. relational databases, csv, parquet, json, etc.).\n\n## How to install SQL?\n\nTo use DuckDB, you can add it to your python virtual environment using `rye`:\n\n```{.bash}\nrye add duckdb duckdb-engine\n```\n\n## Using SQL\n\nConnect to a database.\n\n::: {#a9519b24 .cell execution_count=1}\n``` {.python .cell-code}\n%load_ext sql\n%sql duckdb://\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\NKeleher\\code\\ipa-data-tech-handbook\\.venv\\Lib\\site-packages\\sql\\parse.py:320: SyntaxWarning: invalid escape sequence '\\:'\n  \"\"\"\nC:\\Users\\NKeleher\\code\\ipa-data-tech-handbook\\.venv\\Lib\\site-packages\\sql\\parse.py:350: SyntaxWarning: invalid escape sequence '\\:'\n  \"\"\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<span style=\"None\">Loading configurations from C:\\Users\\NKeleher\\code\\ipa-data-tech-handbook\\pyproject.toml.</span>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<span style=\"None\">Settings changed:</span>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<table>\n    <thead>\n        <tr>\n            <th>Config</th>\n            <th>value</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>feedback</td>\n            <td>0</td>\n        </tr>\n        <tr>\n            <td>autopandas</td>\n            <td>False</td>\n        </tr>\n        <tr>\n            <td>autopolars</td>\n            <td>False</td>\n        </tr>\n        <tr>\n            <td>autolimit</td>\n            <td>0</td>\n        </tr>\n        <tr>\n            <td>displaylimit</td>\n            <td>10</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\nCreate a table from a CSV file.\n\n::: {#9c51d172 .cell execution_count=2}\n``` {.python .cell-code}\n%%sql\nCREATE TABLE penguins AS SELECT * FROM '../assets/data/penguins.csv'\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>Count</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\nInspect the columns of the table.\n\n::: {#9f6d4e3d .cell execution_count=3}\n``` {.python .cell-code}\n%sqlcmd columns -t penguins\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>type</th>\n            <th>nullable</th>\n            <th>default</th>\n            <th>autoincrement</th>\n            <th>comment</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>species</td>\n            <td>VARCHAR</td>\n            <td>True</td>\n            <td>None</td>\n            <td>False</td>\n            <td>None</td>\n        </tr>\n        <tr>\n            <td>island</td>\n            <td>VARCHAR</td>\n            <td>True</td>\n            <td>None</td>\n            <td>False</td>\n            <td>None</td>\n        </tr>\n        <tr>\n            <td>bill_length_mm</td>\n            <td>FLOAT</td>\n            <td>True</td>\n            <td>None</td>\n            <td>False</td>\n            <td>None</td>\n        </tr>\n        <tr>\n            <td>bill_depth_mm</td>\n            <td>FLOAT</td>\n            <td>True</td>\n            <td>None</td>\n            <td>False</td>\n            <td>None</td>\n        </tr>\n        <tr>\n            <td>flipper_length_mm</td>\n            <td>BIGINT</td>\n            <td>True</td>\n            <td>None</td>\n            <td>False</td>\n            <td>None</td>\n        </tr>\n        <tr>\n            <td>body_mass_g</td>\n            <td>BIGINT</td>\n            <td>True</td>\n            <td>None</td>\n            <td>False</td>\n            <td>None</td>\n        </tr>\n        <tr>\n            <td>sex</td>\n            <td>VARCHAR</td>\n            <td>True</td>\n            <td>None</td>\n            <td>False</td>\n            <td>None</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\nQuery the table using a `SELECT` statement.\n\n::: {#e7557271 .cell execution_count=4}\n``` {.python .cell-code}\n%%sql\nSELECT *\nFROM '../assets/data/penguins.csv'\nLIMIT 3\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>species</th>\n            <th>island</th>\n            <th>bill_length_mm</th>\n            <th>bill_depth_mm</th>\n            <th>flipper_length_mm</th>\n            <th>body_mass_g</th>\n            <th>sex</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Adelie</td>\n            <td>Torgersen</td>\n            <td>39.1</td>\n            <td>18.7</td>\n            <td>181</td>\n            <td>3750</td>\n            <td>MALE</td>\n        </tr>\n        <tr>\n            <td>Adelie</td>\n            <td>Torgersen</td>\n            <td>39.5</td>\n            <td>17.4</td>\n            <td>186</td>\n            <td>3800</td>\n            <td>FEMALE</td>\n        </tr>\n        <tr>\n            <td>Adelie</td>\n            <td>Torgersen</td>\n            <td>40.3</td>\n            <td>18.0</td>\n            <td>195</td>\n            <td>3250</td>\n            <td>FEMALE</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\nRun analytical operations on the data.\n\n::: {#2fcb8a5f .cell execution_count=5}\n``` {.python .cell-code}\n%%sql\nSELECT species, COUNT(*) AS count\nFROM '../assets/data/penguins.csv'\nGROUP BY species\nORDER BY count DESC\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>species</th>\n            <th>count</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Adelie</td>\n            <td>152</td>\n        </tr>\n        <tr>\n            <td>Gentoo</td>\n            <td>124</td>\n        </tr>\n        <tr>\n            <td>Chinstrap</td>\n            <td>68</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\nUsing `jupysql` store SQL query results as an object in a Jupyter notebook.\n\n::: {#be06df78 .cell execution_count=6}\n``` {.python .cell-code}\n%%sql species_count <<\nSELECT species, COUNT(*) AS count\nFROM '../assets/data/penguins.csv'\nGROUP BY species\nORDER BY count DESC\n```\n:::\n\n\nPlot the results of the query.\n\n::: {#1dc4b5d7 .cell execution_count=7}\n``` {.python .cell-code}\nax = %sqlplot bar --table '../assets/data/penguins.csv' --column species\n\n# customize plot (this is a matplotlib Axes object)\n_ = ax.set_title(\"Count of penguins by species\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<span style=\"None\">Removing NULLs, if there exists any from species</span>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sql_files/figure-html/cell-8-output-2.png){width=593 height=449}\n:::\n:::\n\n\n## Coding Conventions\n\nUse [SQLFluff](https://docs.sqlfluff.com/en/stable/) to lint SQL code.\n\nAdd SQLFluff to your virtual environment using `rye`:\n\n```{.bash}\nrye add sqlfluff\n```\n\nAssuming SQLFluff is installed in your virtual environment using `rye`, you can run the\nfollowing command to lint SQL code:\n\n```{.bash}\nrye run sqlfluff fix --dialect duckdb\n```\n\nSee the\n[GitLab Data Team's SQL Style Guide](https://handbook.gitlab.com/handbook/business-technology/data-team/platform/sql-style-guide/)\n\n## Learning Resources\n\n- [SELECT Star SQL](https://selectstarsql.com/)\n- [SQL Murder Mystery](https://mystery.knightlab.com/walkthrough.html)\n- [sql-workbench](https://sql-workbench.com/)\n- [DuckDB SQL Introduction](https://duckdb.org/docs/sql/introduction)\n\n",
    "supporting": [
      "sql_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}