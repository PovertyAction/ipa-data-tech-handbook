{
  "hash": "3643190b1b3f8760b30f7522cde9e85d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python\nexecute:\n  eval: true\njupyter:\n  jupytext:\n    text_representation:\n      extension: .qmd\n      format_name: quarto\n      format_version: '1.0'\n      jupytext_version: 1.16.2\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n---\n\n\n\n\n## What is Python?\n\nPython is a high-level, general-purpose programming language that is widely used in data\nscience, machine learning, and web development. It has a large standard library and a\nvibrant community that provides a wide range of libraries and tools for various\napplications. As such, Python provides a general-purpose ecosystem that can be used for\na wide range of applications.\n\n## How to install Python?\n\nThere are many ways to install Python. We recommend using Python in a virtual\nenvironment to avoid conflicts with other Python installations on your system.\n\nWe recommend using [pixi](https://pixi.sh/latest/) as a a simple way to create and\nmanage Python virtual environments.\n\nYou can manage the python packages that are installed in the virtual\nenvironment using a `pyproject.toml` file. See the pyproject.toml example in this\nrepository for an example of how to manage Python packages. To add package dependencies\nto the virtual environment, using `pixi`, you can run:\n\nFirst, install `pixi` using `winget` (Windows) or `brew` (MacOS/Linux):\n\n| Platform | Commands             |\n| -------- | -------------------- |\n| Windows  | `winget install prefix-dev.pixi` |\n| MacOS    | `brew install pixi`   |\n| Linux    | `brew install pixi`   |\n\nAdd libraries to the virtual environment using `pixi add ...`:\n\n::: {#a7e20e28 .cell execution_count=1}\n``` {.python .cell-code}\n> pixi add jupyterlab pandas matplotlib seaborn --pypi\n```\n:::\n\n\n## Coding Conventions\n\nWe highly recommend working with a [virtual environment](../guides/venv.qmd) to manage\nPython dependencies. The `pyproject.toml` is the preferred way to keep track of python\ndependencies as well as project-specific python conventions.\n\nWe recommend using [Ruff](https://docs.astral.sh/ruff/) to enforce\n[linting](<https://en.wikipedia.org/wiki/Lint_(software)>) and formatting rules. In most\ncases you can use the default linting and formatting rules provided by `ruff`. However,\nyou can customize the rules by modifying the `[tool.ruff]` section of the\n`pyproject.toml` file in the root of your project. for more about the configuration\noptions, see the [Ruff documentation](https://docs.astral.sh/ruff/configuration/).\n\nIf you are working in a virtual environment created in this repository`, you automatically have\naccess to `Ruff via  `just lint-py` and `just fmt-python` commands to lint and format your code.\n\nFor more inspiration, see the\n[GitLab Data Team's Python Guide](https://handbook.gitlab.com/handbook/business-technology/data-team/platform/python-guide/)\nand [Google's Python Style Guide](https://google.github.io/styleguide/pyguide.html).\n\n## Example Usage\n\nLet's load an example World Bank data via [Gapminder](https://www.gapminder.org/) using\nthe [causaldata](https://github.com/NickCH-K/causaldata) package.\n\n::: {#7edc64e0 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.formula.api as sm\nfrom causaldata import gapminder\n```\n:::\n\n\nLoad the Gapminder data as a pandas DataFrame:\n\n::: {#cfa82fec .cell execution_count=3}\n``` {.python .cell-code}\ndf = gapminder.load_pandas().data\n```\n:::\n\n\nWe can check the dimensions of the DataFrame using `df.info()`:\n\n::: {#d36c0824 .cell execution_count=4}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1704 entries, 0 to 1703\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   country    1704 non-null   object \n 1   continent  1704 non-null   object \n 2   year       1704 non-null   int64  \n 3   lifeExp    1704 non-null   float64\n 4   pop        1704 non-null   int64  \n 5   gdpPercap  1704 non-null   float64\ndtypes: float64(2), int64(2), object(2)\nmemory usage: 80.0+ KB\n```\n:::\n:::\n\n\nLet's take a look at the first few rows of the DataFrame using `df.head()`:\n\n::: {#ed4450e7 .cell execution_count=5}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>continent</th>\n      <th>year</th>\n      <th>lifeExp</th>\n      <th>pop</th>\n      <th>gdpPercap</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>Asia</td>\n      <td>1952</td>\n      <td>28.801</td>\n      <td>8425333</td>\n      <td>779.445314</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Afghanistan</td>\n      <td>Asia</td>\n      <td>1957</td>\n      <td>30.332</td>\n      <td>9240934</td>\n      <td>820.853030</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Afghanistan</td>\n      <td>Asia</td>\n      <td>1962</td>\n      <td>31.997</td>\n      <td>10267083</td>\n      <td>853.100710</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Afghanistan</td>\n      <td>Asia</td>\n      <td>1967</td>\n      <td>34.020</td>\n      <td>11537966</td>\n      <td>836.197138</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Afghanistan</td>\n      <td>Asia</td>\n      <td>1972</td>\n      <td>36.088</td>\n      <td>13079460</td>\n      <td>739.981106</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTake a look at the relationship between GDP per Capita and Life Expectancy:\n\n::: {#fa1711dd .cell execution_count=6}\n``` {.python .cell-code}\nsns.scatterplot(x=\"gdpPercap\", y=\"lifeExp\", hue=\"continent\", data=df).set(\n    xscale=\"log\", ylabel=\"Life Expectancy\", xlabel=\"GDP per Capita\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](python_files/figure-html/cell-7-output-1.png){width=585 height=431}\n:::\n:::\n\n\nSeparate the data by year, focusing on 1957 and 2007:\n\n::: {#410097cc .cell execution_count=7}\n``` {.python .cell-code}\nsns.relplot(\n    data=df.where(df[\"year\"].isin([1957, 2007])),\n    x=\"gdpPercap\",\n    y=\"lifeExp\",\n    col=\"year\",\n    hue=\"continent\",\n    col_wrap=1,\n    kind=\"scatter\",\n    palette=\"muted\",\n).set(xscale=\"log\", ylabel=\"Life Expectancy\", xlabel=\"GDP per Capita\")\n```\n\n::: {.cell-output .cell-output-display}\n![](python_files/figure-html/cell-8-output-1.png){width=575 height=952}\n:::\n:::\n\n\n## Learning Resources\n\n- [The Python Tutorial](https://docs.python.org/3.12/tutorial/index.html)\n- [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/)\n- [Efficient Python for Data Scientists](https://khuyentran1401.github.io/Efficient_Python_tricks_and_tools_for_data_scientists/README.html)\n- [The Hitchhiker's Guide to Python](https://docs.python-guide.org/)\n\n",
    "supporting": [
      "python_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}